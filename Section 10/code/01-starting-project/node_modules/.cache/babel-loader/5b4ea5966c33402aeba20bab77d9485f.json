{"ast":null,"code":"var _jsxFileName = \"/Users/nina/udemy/max-react-complete/React---The-Complete-Guide-includes-Hooks-React-Router-and-Redux-Second-Edition/Section 10/code/01-starting-project/src/store/auth-context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false\n});\nconst AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const checkLocal = localStorage.getItem('isLoggedIn');\n    if (checkLocal === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n  const logOutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","AuthContext","isLoggedIn","AuthContextProvider","children","setIsLoggedIn","checkLocal","localStorage","getItem","loginHandler","email","password","setItem","logOutHandler","removeItem"],"sources":["/Users/nina/udemy/max-react-complete/React---The-Complete-Guide-includes-Hooks-React-Router-and-Redux-Second-Edition/Section 10/code/01-starting-project/src/store/auth-context.js"],"sourcesContent":["import { createContext, useEffect, useState } from 'react';\n\nconst AuthContext = createContext({\n  isLoggedIn: false,\n});\n\nconst AuthContextProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const checkLocal = localStorage.getItem('isLoggedIn');\n\n    if (checkLocal === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logOutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n  return <AuthContext.Provider>{children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE3D,MAAMC,WAAW,gBAAGH,aAAa,CAAC;EAChCI,UAAU,EAAE;AACd,CAAC,CAAC;AAEF,MAAMC,mBAAmB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvC,MAAM,CAACF,UAAU,EAAEG,aAAa,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMO,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAErD,IAAIF,UAAU,KAAK,GAAG,EAAE;MACtBD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAJ,YAAY,CAACK,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCP,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMQ,aAAa,GAAG,MAAM;IAC1BN,YAAY,CAACO,UAAU,CAAC,YAAY,CAAC;IACrCT,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EACD,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAA,UAAED;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAChE,CAAC;AAAC,GAvBID,mBAAmB;AAAA,KAAnBA,mBAAmB;AAyBzB,eAAeF,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}